#pragma once

#include "symbol.hpp"
#include "tree_sitter/api.h"

extern "C" const TSLanguage *tree_sitter_go(void);

namespace ts {

namespace go {

const TSLanguage *language(void) {
	return tree_sitter_go();
}

constexpr Symbol ts_builtin_sym_end = Symbol(0, "end");
constexpr Symbol sym_identifier = Symbol(1, "identifier");
constexpr Symbol anon_sym_LF = Symbol(2, "\n");
constexpr Symbol anon_sym_SEMI = Symbol(3, ";");
constexpr Symbol anon_sym_package = Symbol(4, "package");
constexpr Symbol anon_sym_import = Symbol(5, "import");
constexpr Symbol anon_sym_DOT = Symbol(6, ".");
constexpr Symbol sym_blank_identifier = Symbol(7, "blank_identifier");
constexpr Symbol anon_sym_LPAREN = Symbol(8, "(");
constexpr Symbol anon_sym_RPAREN = Symbol(9, ")");
constexpr Symbol anon_sym_const = Symbol(10, "const");
constexpr Symbol anon_sym_COMMA = Symbol(11, ",");
constexpr Symbol anon_sym_EQ = Symbol(12, "=");
constexpr Symbol anon_sym_var = Symbol(13, "var");
constexpr Symbol anon_sym_func = Symbol(14, "func");
constexpr Symbol anon_sym_LBRACK = Symbol(15, "[");
constexpr Symbol anon_sym_RBRACK = Symbol(16, "]");
constexpr Symbol anon_sym_DOT_DOT_DOT = Symbol(17, "...");
constexpr Symbol anon_sym_type = Symbol(18, "type");
constexpr Symbol anon_sym_STAR = Symbol(19, "*");
constexpr Symbol anon_sym_struct = Symbol(20, "struct");
constexpr Symbol anon_sym_LBRACE = Symbol(21, "{");
constexpr Symbol anon_sym_RBRACE = Symbol(22, "}");
constexpr Symbol anon_sym_interface = Symbol(23, "interface");
constexpr Symbol anon_sym_PIPE = Symbol(24, "|");
constexpr Symbol anon_sym_TILDE = Symbol(25, "~");
constexpr Symbol anon_sym_map = Symbol(26, "map");
constexpr Symbol anon_sym_chan = Symbol(27, "chan");
constexpr Symbol anon_sym_LT_DASH = Symbol(28, "<-");
constexpr Symbol anon_sym_COLON_EQ = Symbol(29, ":=");
constexpr Symbol anon_sym_PLUS_PLUS = Symbol(30, "++");
constexpr Symbol anon_sym_DASH_DASH = Symbol(31, "--");
constexpr Symbol anon_sym_STAR_EQ = Symbol(32, "*=");
constexpr Symbol anon_sym_SLASH_EQ = Symbol(33, "/=");
constexpr Symbol anon_sym_PERCENT_EQ = Symbol(34, "%=");
constexpr Symbol anon_sym_LT_LT_EQ = Symbol(35, "<<=");
constexpr Symbol anon_sym_GT_GT_EQ = Symbol(36, ">>=");
constexpr Symbol anon_sym_AMP_EQ = Symbol(37, "&=");
constexpr Symbol anon_sym_AMP_CARET_EQ = Symbol(38, "&^=");
constexpr Symbol anon_sym_PLUS_EQ = Symbol(39, "+=");
constexpr Symbol anon_sym_DASH_EQ = Symbol(40, "-=");
constexpr Symbol anon_sym_PIPE_EQ = Symbol(41, "|=");
constexpr Symbol anon_sym_CARET_EQ = Symbol(42, "^=");
constexpr Symbol anon_sym_COLON = Symbol(43, ":");
constexpr Symbol anon_sym_fallthrough = Symbol(44, "fallthrough");
constexpr Symbol anon_sym_break = Symbol(45, "break");
constexpr Symbol anon_sym_continue = Symbol(46, "continue");
constexpr Symbol anon_sym_goto = Symbol(47, "goto");
constexpr Symbol anon_sym_return = Symbol(48, "return");
constexpr Symbol anon_sym_go = Symbol(49, "go");
constexpr Symbol anon_sym_defer = Symbol(50, "defer");
constexpr Symbol anon_sym_if = Symbol(51, "if");
constexpr Symbol anon_sym_else = Symbol(52, "else");
constexpr Symbol anon_sym_for = Symbol(53, "for");
constexpr Symbol anon_sym_range = Symbol(54, "range");
constexpr Symbol anon_sym_switch = Symbol(55, "switch");
constexpr Symbol anon_sym_case = Symbol(56, "case");
constexpr Symbol anon_sym_default = Symbol(57, "default");
constexpr Symbol anon_sym_select = Symbol(58, "select");
constexpr Symbol anon_sym_new = Symbol(59, "identifier");
constexpr Symbol anon_sym_make = Symbol(60, "identifier");
constexpr Symbol anon_sym_PLUS = Symbol(61, "+");
constexpr Symbol anon_sym_DASH = Symbol(62, "-");
constexpr Symbol anon_sym_BANG = Symbol(63, "!");
constexpr Symbol anon_sym_CARET = Symbol(64, "^");
constexpr Symbol anon_sym_AMP = Symbol(65, "&");
constexpr Symbol anon_sym_SLASH = Symbol(66, "/");
constexpr Symbol anon_sym_PERCENT = Symbol(67, "%");
constexpr Symbol anon_sym_LT_LT = Symbol(68, "<<");
constexpr Symbol anon_sym_GT_GT = Symbol(69, ">>");
constexpr Symbol anon_sym_AMP_CARET = Symbol(70, "&^");
constexpr Symbol anon_sym_EQ_EQ = Symbol(71, "==");
constexpr Symbol anon_sym_BANG_EQ = Symbol(72, "!=");
constexpr Symbol anon_sym_LT = Symbol(73, "<");
constexpr Symbol anon_sym_LT_EQ = Symbol(74, "<=");
constexpr Symbol anon_sym_GT = Symbol(75, ">");
constexpr Symbol anon_sym_GT_EQ = Symbol(76, ">=");
constexpr Symbol anon_sym_AMP_AMP = Symbol(77, "&&");
constexpr Symbol anon_sym_PIPE_PIPE = Symbol(78, "||");
constexpr Symbol sym_raw_string_literal = Symbol(79, "raw_string_literal");
constexpr Symbol anon_sym_DQUOTE = Symbol(80, "\"");
constexpr Symbol sym__interpreted_string_literal_basic_content = Symbol(81, "_interpreted_string_literal_basic_content");
constexpr Symbol sym_escape_sequence = Symbol(82, "escape_sequence");
constexpr Symbol sym_int_literal = Symbol(83, "int_literal");
constexpr Symbol sym_float_literal = Symbol(84, "float_literal");
constexpr Symbol sym_imaginary_literal = Symbol(85, "imaginary_literal");
constexpr Symbol sym_rune_literal = Symbol(86, "rune_literal");
constexpr Symbol sym_nil = Symbol(87, "nil");
constexpr Symbol sym_true = Symbol(88, "true");
constexpr Symbol sym_false = Symbol(89, "false");
constexpr Symbol sym_iota = Symbol(90, "iota");
constexpr Symbol sym_comment = Symbol(91, "comment");
constexpr Symbol sym_source_file = Symbol(92, "source_file");
constexpr Symbol sym_package_clause = Symbol(93, "package_clause");
constexpr Symbol sym_import_declaration = Symbol(94, "import_declaration");
constexpr Symbol sym_import_spec = Symbol(95, "import_spec");
constexpr Symbol sym_dot = Symbol(96, "dot");
constexpr Symbol sym_import_spec_list = Symbol(97, "import_spec_list");
constexpr Symbol sym__declaration = Symbol(98, "_declaration");
constexpr Symbol sym_const_declaration = Symbol(99, "const_declaration");
constexpr Symbol sym_const_spec = Symbol(100, "const_spec");
constexpr Symbol sym_var_declaration = Symbol(101, "var_declaration");
constexpr Symbol sym_var_spec = Symbol(102, "var_spec");
constexpr Symbol sym_function_declaration = Symbol(103, "function_declaration");
constexpr Symbol sym_method_declaration = Symbol(104, "method_declaration");
constexpr Symbol sym_type_parameter_list = Symbol(105, "type_parameter_list");
constexpr Symbol sym_parameter_list = Symbol(106, "parameter_list");
constexpr Symbol sym_parameter_declaration = Symbol(107, "parameter_declaration");
constexpr Symbol sym_variadic_parameter_declaration = Symbol(108, "variadic_parameter_declaration");
constexpr Symbol sym_type_alias = Symbol(109, "type_alias");
constexpr Symbol sym_type_declaration = Symbol(110, "type_declaration");
constexpr Symbol sym_type_spec = Symbol(111, "type_spec");
constexpr Symbol sym_expression_list = Symbol(112, "expression_list");
constexpr Symbol sym_parenthesized_type = Symbol(113, "parenthesized_type");
constexpr Symbol sym__simple_type = Symbol(114, "_simple_type");
constexpr Symbol sym_generic_type = Symbol(115, "generic_type");
constexpr Symbol sym_type_arguments = Symbol(116, "type_arguments");
constexpr Symbol sym_pointer_type = Symbol(117, "pointer_type");
constexpr Symbol sym_array_type = Symbol(118, "array_type");
constexpr Symbol sym_implicit_length_array_type = Symbol(119, "implicit_length_array_type");
constexpr Symbol sym_slice_type = Symbol(120, "slice_type");
constexpr Symbol sym_struct_type = Symbol(121, "struct_type");
constexpr Symbol sym_field_declaration_list = Symbol(122, "field_declaration_list");
constexpr Symbol sym_field_declaration = Symbol(123, "field_declaration");
constexpr Symbol sym_interface_type = Symbol(124, "interface_type");
constexpr Symbol sym__interface_body = Symbol(125, "_interface_body");
constexpr Symbol sym_interface_type_name = Symbol(126, "interface_type_name");
constexpr Symbol sym_constraint_elem = Symbol(127, "constraint_elem");
constexpr Symbol sym_constraint_term = Symbol(128, "constraint_term");
constexpr Symbol sym_method_spec = Symbol(129, "method_spec");
constexpr Symbol sym_map_type = Symbol(130, "map_type");
constexpr Symbol sym_channel_type = Symbol(131, "channel_type");
constexpr Symbol sym_function_type = Symbol(132, "function_type");
constexpr Symbol sym_block = Symbol(133, "block");
constexpr Symbol sym__statement_list = Symbol(134, "_statement_list");
constexpr Symbol sym__statement = Symbol(135, "_statement");
constexpr Symbol sym_empty_statement = Symbol(136, "empty_statement");
constexpr Symbol sym__simple_statement = Symbol(137, "_simple_statement");
constexpr Symbol sym_send_statement = Symbol(138, "send_statement");
constexpr Symbol sym_receive_statement = Symbol(139, "receive_statement");
constexpr Symbol sym_inc_statement = Symbol(140, "inc_statement");
constexpr Symbol sym_dec_statement = Symbol(141, "dec_statement");
constexpr Symbol sym_assignment_statement = Symbol(142, "assignment_statement");
constexpr Symbol sym_short_var_declaration = Symbol(143, "short_var_declaration");
constexpr Symbol sym_labeled_statement = Symbol(144, "labeled_statement");
constexpr Symbol sym_empty_labeled_statement = Symbol(145, "labeled_statement");
constexpr Symbol sym_fallthrough_statement = Symbol(146, "fallthrough_statement");
constexpr Symbol sym_break_statement = Symbol(147, "break_statement");
constexpr Symbol sym_continue_statement = Symbol(148, "continue_statement");
constexpr Symbol sym_goto_statement = Symbol(149, "goto_statement");
constexpr Symbol sym_return_statement = Symbol(150, "return_statement");
constexpr Symbol sym_go_statement = Symbol(151, "go_statement");
constexpr Symbol sym_defer_statement = Symbol(152, "defer_statement");
constexpr Symbol sym_if_statement = Symbol(153, "if_statement");
constexpr Symbol sym_for_statement = Symbol(154, "for_statement");
constexpr Symbol sym_for_clause = Symbol(155, "for_clause");
constexpr Symbol sym_range_clause = Symbol(156, "range_clause");
constexpr Symbol sym_expression_switch_statement = Symbol(157, "expression_switch_statement");
constexpr Symbol sym_expression_case = Symbol(158, "expression_case");
constexpr Symbol sym_default_case = Symbol(159, "default_case");
constexpr Symbol sym_type_switch_statement = Symbol(160, "type_switch_statement");
constexpr Symbol sym__type_switch_header = Symbol(161, "_type_switch_header");
constexpr Symbol sym_type_case = Symbol(162, "type_case");
constexpr Symbol sym_select_statement = Symbol(163, "select_statement");
constexpr Symbol sym_communication_case = Symbol(164, "communication_case");
constexpr Symbol sym__expression = Symbol(165, "_expression");
constexpr Symbol sym_parenthesized_expression = Symbol(166, "parenthesized_expression");
constexpr Symbol sym_call_expression = Symbol(167, "call_expression");
constexpr Symbol sym_variadic_argument = Symbol(168, "variadic_argument");
constexpr Symbol sym_special_argument_list = Symbol(169, "argument_list");
constexpr Symbol sym_argument_list = Symbol(170, "argument_list");
constexpr Symbol sym_selector_expression = Symbol(171, "selector_expression");
constexpr Symbol sym_index_expression = Symbol(172, "index_expression");
constexpr Symbol sym_slice_expression = Symbol(173, "slice_expression");
constexpr Symbol sym_type_assertion_expression = Symbol(174, "type_assertion_expression");
constexpr Symbol sym_type_conversion_expression = Symbol(175, "type_conversion_expression");
constexpr Symbol sym_composite_literal = Symbol(176, "composite_literal");
constexpr Symbol sym_literal_value = Symbol(177, "literal_value");
constexpr Symbol sym_literal_element = Symbol(178, "literal_element");
constexpr Symbol sym_keyed_element = Symbol(179, "keyed_element");
constexpr Symbol sym_func_literal = Symbol(180, "func_literal");
constexpr Symbol sym_unary_expression = Symbol(181, "unary_expression");
constexpr Symbol sym_binary_expression = Symbol(182, "binary_expression");
constexpr Symbol sym_qualified_type = Symbol(183, "qualified_type");
constexpr Symbol sym_interpreted_string_literal = Symbol(184, "interpreted_string_literal");
constexpr Symbol aux_sym_source_file_repeat1 = Symbol(185, "source_file_repeat1");
constexpr Symbol aux_sym_import_spec_list_repeat1 = Symbol(186, "import_spec_list_repeat1");
constexpr Symbol aux_sym_const_declaration_repeat1 = Symbol(187, "const_declaration_repeat1");
constexpr Symbol aux_sym_const_spec_repeat1 = Symbol(188, "const_spec_repeat1");
constexpr Symbol aux_sym_var_declaration_repeat1 = Symbol(189, "var_declaration_repeat1");
constexpr Symbol aux_sym_type_parameter_list_repeat1 = Symbol(190, "type_parameter_list_repeat1");
constexpr Symbol aux_sym_parameter_list_repeat1 = Symbol(191, "parameter_list_repeat1");
constexpr Symbol aux_sym_parameter_declaration_repeat1 = Symbol(192, "parameter_declaration_repeat1");
constexpr Symbol aux_sym_type_declaration_repeat1 = Symbol(193, "type_declaration_repeat1");
constexpr Symbol aux_sym_expression_list_repeat1 = Symbol(194, "expression_list_repeat1");
constexpr Symbol aux_sym_type_arguments_repeat1 = Symbol(195, "type_arguments_repeat1");
constexpr Symbol aux_sym_field_declaration_list_repeat1 = Symbol(196, "field_declaration_list_repeat1");
constexpr Symbol aux_sym_field_declaration_repeat1 = Symbol(197, "field_declaration_repeat1");
constexpr Symbol aux_sym_interface_type_repeat1 = Symbol(198, "interface_type_repeat1");
constexpr Symbol aux_sym_constraint_elem_repeat1 = Symbol(199, "constraint_elem_repeat1");
constexpr Symbol aux_sym__statement_list_repeat1 = Symbol(200, "_statement_list_repeat1");
constexpr Symbol aux_sym_expression_switch_statement_repeat1 = Symbol(201, "expression_switch_statement_repeat1");
constexpr Symbol aux_sym_type_switch_statement_repeat1 = Symbol(202, "type_switch_statement_repeat1");
constexpr Symbol aux_sym_select_statement_repeat1 = Symbol(203, "select_statement_repeat1");
constexpr Symbol aux_sym_argument_list_repeat1 = Symbol(204, "argument_list_repeat1");
constexpr Symbol aux_sym_literal_value_repeat1 = Symbol(205, "literal_value_repeat1");
constexpr Symbol aux_sym_interpreted_string_literal_repeat1 = Symbol(206, "interpreted_string_literal_repeat1");
constexpr Symbol alias_sym_field_identifier = Symbol(207, "field_identifier");
constexpr Symbol alias_sym_label_name = Symbol(208, "label_name");
constexpr Symbol alias_sym_package_identifier = Symbol(209, "package_identifier");
constexpr Symbol alias_sym_type_identifier = Symbol(210, "type_identifier");

}

}
